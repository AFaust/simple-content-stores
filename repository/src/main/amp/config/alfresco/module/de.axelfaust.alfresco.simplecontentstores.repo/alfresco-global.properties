# feature needs to be explicitly enabled
simpleContentStores.enabled=false

# default to the out-of-the-box standard content store
# this property will be used to modify contentService reference to "store"
simpleContentStores.rootStore=fileContentStore

# property to define names of custom content stores to setup (if enabled)
simpleContentStores.customStores=simpleSelectorStore,quarantineFileStore

# example configuration to setup a store that routes depending on value of a property
# type refers to specific prototype-scope bean definitions as "templates"
simpleContentStores.customStore.simpleSelectorStore.type=selectorPropertyStore
# value.XY defines values of bean properties
# selectorClassName and selectorPropertyName are specific to the selectorPropertyStore template
# example uses aspect and property from out-of-the-box content model
simpleContentStores.customStore.simpleSelectorStore.value.selectorClassName=cm:storeSelector
simpleContentStores.customStore.simpleSelectorStore.value.selectorPropertyName=cm:storeName
simpleContentStores.customStore.simpleSelectorStore.value.selectorValuesConstraintShortName=defaultStoreSelector
simpleContentStores.customStore.simpleSelectorStore.value.moveStoresOnChange=true
# ref.XY defines references to other beans as bean properties
# fallbackStore will be used as the default store in selectorPropertyStore template 
simpleContentStores.customStore.simpleSelectorStore.ref.fallbackStore=fileContentStore
# map.XY defines maps as bean properties
# map.XY.value.A defines a value for the key A in the map XY
# map.XY.ref.A defines a brean reference for the key A in the map XY
simpleContentStores.customStore.simpleSelectorStore.map.storeBySelectorPropertyValue.ref.quarantine=quarantineFileStore
# list.value.XY defines lists of values as bean properties (comma-separated)
# list.ref.XY defines lists of bean references as bean properties (comma-separated)
simpleContentStores.customStore.simpleSelectorStore.list.value.routeContentPropertyNames=cm:content

# the quarantineFileStore is just another example to make simpleSelectorStore work
simpleContentStores.customStore.quarantineFileStore.type=standardFileStore
simpleContentStores.customStore.quarantineFileStore.value.rootDirectory=${dir.root}/contentstore.quarantine
simpleContentStores.customStore.quarantineFileStore.value.readOnly=false
simpleContentStores.customStore.quarantineFileStore.value.allowRandomAccess=false
simpleContentStores.customStore.quarantineFileStore.value.deleteEmptyDirs=false